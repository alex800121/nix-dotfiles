diff --git a/auto_cpufreq/core.py b/auto_cpufreq/core.py
index 83d0d64..04b5035 100644
--- a/auto_cpufreq/core.py
+++ b/auto_cpufreq/core.py
@@ -158,33 +158,64 @@ def get_turbo():
     else:
         print("Currently turbo boost is: off")
 
-
 def charging():
     """
     get charge state: is battery charging or discharging
     """
-    power_dir = "/sys/class/power_supply/"
-
-    computer_type = getoutput("dmidecode --string chassis-type")
-    if computer_type in ["Notebook", "Laptop", "Convertible", "Portable"]:
-        # AC adapter states: 0, 1, unknown
-        ac_info = getoutput(f"grep . {power_dir}A*/online").splitlines()
-        # if there's one ac-adapter on-line, ac_state is True
-        ac_state = any(["1" in ac.split(":")[-1] for ac in ac_info])
+    power_supply_path = "/sys/class/power_supply/"
+    power_supplies = os.listdir(Path(power_supply_path))
+    # sort it so AC is 'always' first
+    power_supplies = sorted(power_supplies)
+
+    # check if we found power supplies. on a desktop these are not found
+    # and we assume we are on a powercable.
+    if len(power_supplies) == 0:
+        # nothing found found, so nothing to check
+        return True
+    # we found some power supplies, lets check their state
     else:
-        has_battery = psutil.sensors_battery() is not None
-        if has_battery:
-            power_pluggedin = psutil.sensors_battery().power_plugged
-            if power_pluggedin:
-                ac_state = True
-            else:
-                ac_state = False
-        else:
-            ac_state = True
-
-    # if both ac-adapter and battery states are unknown default to not charging
-    return ac_state
+        for supply in power_supplies:
+            # Check if supply is in ignore list
+            ignore_supply = any(item in supply for item in POWER_SUPPLY_IGNORELIST)
+            # If found in ignore list, skip it.
+            if ignore_supply:
+                continue
+
+            try:
+                with open(Path(power_supply_path + supply + "/type")) as f:
+                    supply_type = f.read()[:-1]
+                    if supply_type == "Mains":
+                        # we found an AC
+                        try:
+                            with open(Path(power_supply_path + supply + "/online")) as f:
+                                val = int(f.read()[:-1])
+                                if val == 1:
+                                    # we are definitely charging
+                                    return True
+                        except FileNotFoundError:
+                            # we could not find online, check next item
+                            continue
+                    elif supply_type == "Battery":
+                        # we found a battery, check if its being discharged
+                        try:
+                            with open(Path(power_supply_path + supply + "/status")) as f:
+                                val = str(f.read()[:-1])
+                                if val == "Discharging":
+                                    # we found a discharging battery
+                                    return False
+                        except FileNotFoundError:
+                            # could not find status, check the next item
+                            continue
+                    else:
+                        # continue to next item because current is not
+                        # "Mains" or "Battery"
+                        continue
+            except FileNotFoundError:
+                # could not find type, check the next item
+                continue
 
+    # we cannot determine discharging state, assume we are on powercable
+    return True
 
 def get_avail_gov():
     f = Path("/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors")


@@ -204,35 +204,13 @@ def get_current_gov():
 
 
 def cpufreqctl():
-    """
-    deploy cpufreqctl script
-    """
-
-    # detect if running on a SNAP
-    if os.getenv("PKG_MARKER") == "SNAP":
-        pass
-    else:
-        # deploy cpufreqctl.auto-cpufreq script
-        if os.path.isfile("/usr/bin/cpufreqctl"):
-            shutil.copy(
-                SCRIPTS_DIR / "cpufreqctl.sh", "/usr/bin/cpufreqctl.auto-cpufreq"
-            )
-        else:
-            shutil.copy(
-                SCRIPTS_DIR / "cpufreqctl.sh", "/usr/bin/cpufreqctl.auto-cpufreq"
-            )
+    # scripts are already in the correct place
+    pass
 
 
 def cpufreqctl_restore():
-    """
-    remove cpufreqctl.auto-cpufreq script
-    """
-    # detect if running on a SNAP
-    if os.getenv("PKG_MARKER") == "SNAP":
-        pass
-    else:
-        if os.path.isfile("/usr/bin/cpufreqctl.auto-cpufreq"):
-            os.remove("/usr/bin/cpufreqctl.auto-cpufreq")
+    # no need to restore
+    pass
 
 
 def footer(l=79):
@@ -276,76 +254,13 @@ def remove_complete_msg():
 
 
 def deploy_daemon():
-    print("\n" + "-" * 21 + " Deploying auto-cpufreq as a daemon " + "-" * 22 + "\n")
-
-    # deploy cpufreqctl script func call
-    cpufreqctl()
-
-    print("* Turn off bluetooth on boot")
-    btconf = Path("/etc/bluetooth/main.conf")
-    try:
-        orig_set = "AutoEnable=true"
-        change_set = "AutoEnable=false"
-        with btconf.open(mode="r+") as f:
-            content = f.read()
-            f.seek(0)
-            f.truncate()
-            f.write(content.replace(orig_set, change_set))
-    except Exception as e:
-        print(f"\nERROR:\nWas unable to turn off bluetooth on boot\n{repr(e)}")
-
-    auto_cpufreq_stats_path.touch(exist_ok=True)
-
-    print("\n* Deploy auto-cpufreq install script")
-    shutil.copy(
-        SCRIPTS_DIR / "auto-cpufreq-install.sh", "/usr/bin/auto-cpufreq-install"
-    )
-
-    print("\n* Deploy auto-cpufreq remove script")
-    shutil.copy(SCRIPTS_DIR / "auto-cpufreq-remove.sh", "/usr/bin/auto-cpufreq-remove")
-
-    call("/usr/bin/auto-cpufreq-install", shell=True)
+    # prevent needless copying and system changes
+    pass
 
 
 # remove auto-cpufreq daemon
 def remove():
-
-    # check if auto-cpufreq is installed
-    if not os.path.exists("/usr/bin/auto-cpufreq-remove"):
-        print("\nauto-cpufreq daemon is not installed.\n")
-        sys.exit(1)
-
-    print("\n" + "-" * 21 + " Removing auto-cpufreq daemon " + "-" * 22 + "\n")
-
-    print("* Turn on bluetooth on boot")
-    btconf = "/etc/bluetooth/main.conf"
-    try:
-        orig_set = "AutoEnable=true"
-        change_set = "AutoEnable=false"
-        with open(btconf, "r+") as f:
-            content = f.read()
-            f.seek(0)
-            f.truncate()
-            f.write(content.replace(change_set, orig_set))
-    except Exception as e:
-        print(f"\nERROR:\nWas unable to turn on bluetooth on boot\n{repr(e)}")
-
-    # run auto-cpufreq daemon install script
-    call("/usr/bin/auto-cpufreq-remove", shell=True)
-
-    # remove auto-cpufreq-remove
-    os.remove("/usr/bin/auto-cpufreq-remove")
-
-    # delete stats file
-    if auto_cpufreq_stats_path.exists():
-        if auto_cpufreq_stats_file is not None:
-            auto_cpufreq_stats_file.close()
-
-        auto_cpufreq_stats_path.unlink()
-
-    # restore original cpufrectl script
-    cpufreqctl_restore()
-
+    pass
 
 def gov_check():
     for gov in get_avail_gov():
diff --git a/scripts/cpufreqctl.sh b/scripts/cpufreqctl.sh
index 63a2b5b..e157efe 100755
--- a/scripts/cpufreqctl.sh
+++ b/scripts/cpufreqctl.sh
@@ -467,35 +467,21 @@ fi
 
 if [ $OPTION = "--install" ]
 then
-  echo 'installing helpers...'
-  cp $0 /usr/bin/
-  echo 'installing policy...'
-  cp $(dirname "$(readlink -f "$0")")/konkor.cpufreq.policy /usr/share/polkit-1/actions/
-  echo 'installing fonts...'
-  mkdir -p /usr/share/fonts/truetype/cpufreq
-  cp $(dirname "$(readlink -f "$0")")/fonts/cpufreq.ttf /usr/share/fonts/truetype/cpufreq/
-  echo "done"
+  echo "install is disabled in the nix package"
   exit
 fi
 if [ $OPTION = "--update-fonts" ]
 then
-  fc-cache -f
+  echo "update-fonts is disabled in the nix package"
   exit
 fi
 if [ $OPTION = "--uninstall" ]
 then
-  echo 'uninstalling cpufreqctl helper...'
-  rm /usr/bin/cpufreqctl
-  echo 'uninstalling policy...'
-  rm /usr/share/polkit-1/actions/konkor.cpufreq.policy
-  echo 'uninstalling fonts...'
-  rm -rf /usr/share/fonts/truetype/cpufreq
-  echo "done"
+  echo "uninstall is disabled in the nix package"
   exit
 fi
 if [ $OPTION = "--reset" ]
 then
-  echo 'reset to default values...'
-  dconf reset -f "/org/gnome/shell/extensions/cpufreq/"
+  echo "reset is disabled in the nix package"
   exit
 fi
